name: Create VPS

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 355   # Run slightly less than 6h

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 📂 Prepare dirs
        run: mkdir -p links .backup

      - name: 🐳 Install Docker & deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates curl gnupg lsb-release unzip jq \
            php php-cli tmate

          # Install docker (from ubuntu repo, stable)
          sudo apt-get install -y docker.io
          docker --version

      - name: 🛢️ Start MySQL in Docker
        run: |
          docker run -d \
            --name mysql \
            -e MYSQL_ROOT_PASSWORD=rootpass \
            -e MYSQL_DATABASE=panel \
            -e MYSQL_USER=paneluser \
            -e MYSQL_PASSWORD=panelpass \
            -p 3306:3306 \
            mysql:8.0
          echo "⏳ Waiting for MySQL..."
          for i in {1..30}; do
            docker exec mysql mysql -uroot -prootpass -e "SELECT 1;" && break
            sleep 2
          done

      - name: 🔧 Install Pterodactyl Panel + Wings
        run: |
          # Panel container
          docker run -d --name pterodactyl \
            --link mysql:mysql \
            -p 8080:80 \
            -e DB_HOST=mysql \
            -e DB_PORT=3306 \
            -e DB_DATABASE=panel \
            -e DB_USERNAME=paneluser \
            -e DB_PASSWORD=panelpass \
            ghcr.io/pterodactyl/panel:latest

          # Wait for panel container to initialize Laravel
          sleep 60

          # Wings container
          docker run -d --name wings \
            --privileged \
            --network host \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v /etc/pterodactyl:/etc/pterodactyl \
            -v /var/lib/pterodactyl:/var/lib/pterodactyl \
            ghcr.io/pterodactyl/wings:latest

      - name: 👑 Create Admin User
        run: |
          echo "⏳ Waiting for Panel migrations..."
          for i in {1..20}; do
            docker exec pterodactyl php artisan migrate --force && break
            sleep 10
          done

          echo "👑 Creating admin user..."
          docker exec -i pterodactyl php artisan p:user:make \
            --email=admin@example.com \
            --username=admin \
            --name-first=Auto \
            --name-last=Admin \
            --password=AdminPass123 \
            --admin=1 || true

      - name: 🔌 Start tmate + Notify Discord
        run: |
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          PANEL_URL="http://$(curl -s ifconfig.me):8080"

          echo "$SSH" > "links/${{ github.event.client_payload.vps_name || 'autovps' }}.txt"
          echo "$PANEL_URL" > "links/${{ github.event.client_payload.vps_name || 'autovps' }}_panel.txt"

          curl -H "Content-Type: application/json" -X POST \
            -d "{\"content\": \"✅ VPS Ready!\n🌐 Panel: $PANEL_URL\n👑 Admin: admin@example.com / AdminPass123\n🔑 SSH: $SSH\"}" \
            "https://discord.com/api/webhooks/1354349049410490418/XaRlJspNCk8h8QMkY329QVqNOP2BiJ-hx_1MA00EDSNDXFDJxwPAbjReNuKeGfweTA7X"

      - name: 💾 Save backup
        run: |
          name="${{ github.event.client_payload.vps_name || 'autovps' }}"
          zip -r ".backup/$name.zip" * .git/** ".github/**" ".backup/**" || true

      - name: ⬆️ Push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔄 Updated SSH + backup for ${{ github.event.client_payload.vps_name || 'autovps' }}"
          file_pattern: 'links/*.txt .backup/*.zip'

      - name: 🔁 Re-trigger workflow
        if: always()
        run: |
          echo "🔄 Re-triggering workflow before timeout..."
          curl -X POST https://api.github.com/repos/${{ github.repository }}/dispatches \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{ "event_type": "create-vps", "client_payload": { "vps_name": "autovps", "backup": true }}'

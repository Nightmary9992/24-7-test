name: Create VPS

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 355   # Run slightly less than 6h (to avoid hitting the hard cap)

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v3

      - name: üìÇ Create dirs
        run: mkdir -p links .backup

      - name: üì¶ Restore backup
        run: |
          name="${{ github.event.client_payload.vps_name }}"
          if [ "${{ github.event.client_payload.backup }}" == "true" ]; then
            echo "üîÑ Restoring backup..."
            unzip ".backup/$name.zip" -d . || echo "‚ö†Ô∏è No backup to restore."
          fi

      - name: üîå Start tmate session
        run: |
          echo "üîÑ Launching tmate..."
          sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH" > "links/${{ github.event.client_payload.vps_name }}.txt"
          echo "‚úÖ SSH Ready: $SSH"
          echo "$SSH" > ssh_link.txt

      - name: üåê Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok

      - name: üåê Start ngrok tunnel for panel
        run: |
          nohup ngrok http 80 --log=stdout > ngrok.log 2>&1 &
          sleep 10
          PANEL_URL=$(curl --silent http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "$PANEL_URL" > links/panel_url.txt

      - name: üõ† Install Pterodactyl Panel + Wings
        run: |
          sudo apt update && sudo apt install -y docker.io docker-compose mysql-server php php-cli unzip curl jq
          sudo systemctl start mysql
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS panel;"
          sudo mysql -e "CREATE USER IF NOT EXISTS 'ptero'@'localhost' IDENTIFIED BY 'password';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON panel.* TO 'ptero'@'localhost'; FLUSH PRIVILEGES;"
          curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          mkdir -p /var/www/pterodactyl
          tar -xzvf panel.tar.gz -C /var/www/pterodactyl --strip-components=1
          cd /var/www/pterodactyl && cp .env.example .env
          php artisan key:generate --force
          php artisan migrate --force
          php artisan db:seed --force
          php artisan p:user:make --email=admin@ptero.local --admin=1 --username=admin --name-first=Admin --name-last=User --password=SuperSecret123 || true
          docker run -d --name pterodactyl-wings --restart unless-stopped \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v /var/lib/pterodactyl:/var/lib/pterodactyl \
            quay.io/pterodactyl/wings:latest

      - name: üì© Send Discord Notification
        run: |
          ADMIN_EMAIL="admin@ptero.local"
          ADMIN_PASS="SuperSecret123"
          PANEL_URL=$(cat links/panel_url.txt)
          SSH=$(cat ssh_link.txt)

          CONTENT="üñ•Ô∏è **Pterodactyl Panel is Ready!**\n\nüåê URL: $PANEL_URL\nüë§ Email: $ADMIN_EMAIL\nüîë Password: $ADMIN_PASS\n\nüîë SSH: $SSH\n\n‚ö° This link will expire after 6h."

          JSON=$(jq -n --arg content "$CONTENT" '{content: $content}')

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$JSON" \
               "https://discord.com/api/webhooks/1354349049410490418/XaRlJspNCk8h8QMkY329QVqNOP2BiJ-hx_1MA00EDSNDXFDJxwPAbjReNuKeGfweTA7X"

      - name: üíæ Save backup
        run: |
          name="${{ github.event.client_payload.vps_name }}"
          zip -r ".backup/$name.zip" * .git/** ".github/**" ".backup/**" || true

      - name: ‚¨ÜÔ∏è Push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "üîÑ Updated SSH + backup for ${{ github.event.client_payload.vps_name }}"
          file_pattern: 'links/*.txt .backup/*.zip'

      - name: üîÅ Re-trigger workflow
        if: always()
        run: |
          echo "üîÑ Re-triggering workflow before timeout..."
          curl -X POST https://api.github.com/repos/${{ github.repository }}/dispatches \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{ "event_type": "create-vps", "client_payload": { "vps_name": "autovps", "backup": true }}'

name: Create VPS

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      VPS_NAME: "${{ github.event.client_payload.vps_name }}"
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_PASS: "AdminPass123"
      DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1354349049410490418/XaRlJspNCk8h8QMkY329QVqNOP2BiJ-hx_1MA00EDSNDXFDJxwPAbjReNuKeGfweTA7X"
      TMATE_SECONDS: "21540" # ~6h

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v3

      - name: üìÇ Create dirs
        run: mkdir -p links .backup temp

      - name: üì¶ Restore backup if available
        run: |
          if [ "${{ github.event.client_payload.backup }}" == "true" ]; then
            echo "üîÑ Restoring backup..."
            name="${VPS_NAME}"
            unzip ".backup/$name.zip" -d . || echo "‚ö†Ô∏è No backup to restore."
          fi

      - name: üß∞ Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip jq curl git

          # Remove conflicting containerd
          sudo apt-get remove -y containerd containerd.io || true

          # Install Docker
          curl -fsSL https://get.docker.com | sh
          docker --version

          # Install tmate
          TMATE_VERSION=2.4.0
          curl -L https://github.com/tmate-io/tmate/releases/download/$TMATE_VERSION/tmate-$TMATE_VERSION-static-linux-amd64.tar.xz -o tmate.tar.xz
          tar -xf tmate.tar.xz
          sudo mv tmate*/tmate /usr/local/bin/
          rm -rf tmate*
          tmate -V

      - name: üê¨ Start MySQL in Docker
        run: |
          docker rm -f pterodactyl_mysql || true
          docker volume rm pterodactyl_mysql_data || true
          docker run -d --name pterodactyl_mysql \
            --network bridge \
            -v pterodactyl_mysql_data:/var/lib/mysql \
            -e MYSQL_ROOT_PASSWORD=rootpass \
            -e MYSQL_DATABASE=pterodactyl_db \
            -e MYSQL_USER=ptero \
            -e MYSQL_PASSWORD=pteropass \
            mysql:8.0 --default-authentication-plugin=mysql_native_password
          echo "Waiting for MySQL..."
          for i in $(seq 1 30); do
            docker exec pterodactyl_mysql mysql -uroot -prootpass -e "SELECT 1;" >/dev/null 2>&1 && break
            sleep 2
          done

      - name: üîß Start Pterodactyl Panel
        run: |
          docker rm -f pterodactyl || true
          docker volume create pterodactyl_panel_data || true
          docker run -d --name pterodactyl \
            --network bridge \
            -p 8080:80 \
            -e DB_HOST=pterodactyl_mysql \
            -e DB_PORT=3306 \
            -e DB_DATABASE=pterodactyl_db \
            -e DB_USERNAME=ptero \
            -e DB_PASSWORD=pteropass \
            -e APP_KEY="base64:0nYbJe1iR9o0bLJYy7exKgDq+Zoy7Z9Wm8rKpW63g2k=" \
            -v pterodactyl_panel_data:/var/www/pterodactyl \
            ghcr.io/pterodactyl/panel:latest
          echo "Waiting for panel..."
          for i in $(seq 1 30); do
            docker exec pterodactyl php -v >/dev/null 2>&1 && break
            sleep 3
          done

      - name: üîÑ Run migrations
        run: |
          docker exec pterodactyl php artisan migrate --force || true
          echo "Migration status:"
          docker exec pterodactyl php artisan migrate:status || true

      - name: üëë Create admin user
        run: |
          docker exec -i pterodactyl php artisan p:user:make \
            --email="$ADMIN_EMAIL" \
            --username="admin" \
            --name-first="Auto" \
            --name-last="Admin" \
            --password="$ADMIN_PASS" \
            --admin=1 || true
          echo "EMAIL:$ADMIN_EMAIL" > links/admin_info.txt
          echo "PASS:$ADMIN_PASS" >> links/admin_info.txt

      - name: üêâ Start Wings
        run: |
          mkdir -p temp
          cat > temp/wings.yml <<'YAML'
          panel:
            url: "http://pterodactyl"
            token_id: "localtoken"
            token: "localtoken123"
            verify_tls: false
          api:
            host: 0.0.0.0
            port: 8080
          docker:
            network:
              interface: docker0
          YAML

          docker rm -f pterodactyl_wings || true
          docker run -d --name pterodactyl_wings \
            --privileged \
            --network bridge \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v /etc/pterodactyl:/etc/pterodactyl:rw \
            -v /var/lib/pterodactyl:/var/lib/pterodactyl:rw \
            -v $PWD/temp/wings.yml:/etc/pterodactyl/config.yml \
            ghcr.io/pterodactyl/wings:latest
          echo "‚úÖ Wings started"

      - name: üåê Start ngrok & get panel URL
        run: |
          mkdir -p links
          cd temp
          curl -s -L "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip" -o ngrok.zip
          unzip -o ngrok.zip >/dev/null 2>&1 || true
          chmod +x ngrok
          nohup ./ngrok http 8080 >/dev/null 2>&1 &
          sleep 6

          PANEL_URL=""
          for i in $(seq 1 20); do
            PANEL_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
            if [ "$PANEL_URL" != "null" ] && [ -n "$PANEL_URL" ]; then
              break
            fi
            echo "‚è≥ Waiting for ngrok tunnel..."
            sleep 3
          done

          if [ -z "$PANEL_URL" ] || [ "$PANEL_URL" = "null" ]; then
            echo "‚ùå Ngrok tunnel failed"
            exit 1
          fi

          echo "üåç Panel URL: $PANEL_URL"
          echo "$PANEL_URL" | tee ../links/panel_url.txt

      - name: üîó Start tmate session
        run: |
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "üîë SSH Session: $SSH"
          echo "$SSH" > "links/${VPS_NAME}.txt"
          echo "SSH:$SSH" >> links/admin_info.txt

      - name: üì£ Send info to Discord
        run: |
          CONTENT="**VPS:** $VPS_NAME\n**Panel:** $(cat links/panel_url.txt)\n**Admin Email:** $ADMIN_EMAIL\n**Admin Pass:** $ADMIN_PASS\n**SSH:** $(cat links/${VPS_NAME}.txt)"
          curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$CONTENT\"}" $DISCORD_WEBHOOK

      - name: üíæ Backup data
        run: |
          mkdir -p .backup/pterodactyl_data
          docker exec pterodactyl_mysql sh -c 'exec mysqldump -uptero -ppteropass pterodactyl_db' > .backup/pterodactyl_data/pterodactyl.sql
          cp temp/wings.yml .backup/pterodactyl_data/wings.yml
          docker exec pterodactyl tar czf /tmp/panel_files.tar.gz /var/www/pterodactyl
          docker cp pterodactyl:/tmp/panel_files.tar.gz .backup/pterodactyl_data/panel_files.tar.gz
          cp -r links .backup/pterodactyl_data/
          zip -r ".backup/$VPS_NAME.zip" .backup/pterodactyl_data || true

      - name: ‚è≥ Keep session alive
        run: |
          echo "Sleeping $TMATE_SECONDS seconds..."
          sleep $TMATE_SECONDS
